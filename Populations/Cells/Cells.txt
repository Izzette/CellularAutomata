
file: ICell: public interface ICell:
			
	All base and abstract Cells classes inherit.

	ICell GetNext ():

		Depends on base.next: null until added to prvent infinite search loop risk
		
		returns next ICell in scan.

	int GetState ():

		returns state

	void SetState (int state):
		
		sets state.
		
	int GetNeighbourhood (int color):

		color is the number of colors.
		returns neighbourhood.
	
All base and abstract class members contain the following static methods or constructors:

	public static ICell[] Build (int[] size, out int[] states):
		
		Creates network of cells in specified size with specified states.
		Size is safed with manual exceptions.
		Overload for this (int[] size, int[] states).
		return items.
		
	public static ICell[] Build (int[] size, int[] states):

		Overload for Build (int[] size, int[] states):
		Constructs int[] states with simple seed.
		size safed with manual exceptions.
		
	public this (int state):

		Constructs new cell with given state.
		All links to this.
	
file: GCellLib: public General inherit Cells.ICell:

	See note above about all base and abstract classes.
	
	Scan order: left, this, right.
	
	public General AddNeighbour (int state):
			
			Adds neighbour with passed state.
			returns cell added.
			
file: VNCellLib: public VonNeumann inherit Cells.ICell:

	See note above about all base and abstract classes.
	
	Scan order: clockwise around border neighours, starting at left, folowed by this.
	
	public VonNeumann AddNeighbour (int state, bool newRow):
			
			Adds neighbour with passed state in current row if not (newRow).
			Adds neighbour with passes state in new row if (newRow).
			returns cell added.

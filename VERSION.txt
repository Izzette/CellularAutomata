va2.0: New Major Version.

Reason:
	
	Performance enhancement.
	Restore maintainability.
	Implement powerful console-based UI.

namespace CellularAutomata:

	namespace Populations:
	
		Contains Cells namespace and Cells collections.
	
		file: VPopulationLib: public enum Variety:
		
			{ General, VonNeumann }.
			CellType Enumerations.
	
		file: IPopulationLib: public IPopulation inherit System.ICloneable:
		
			All base and abstract Populations classes inherit.
			
			void Evolve ():
			
				Evolves population according to simple rule.
				
			int[] GetStates (out int[] size):
			.
				out size for allow to interpret dimensions.
				return states.
				
			void SetRule (IRule rule):
			
				Sets rule for population.
				Initialization dependancy
				
			IRule GetRule ():
			
				return rule.
				
			Variety GetVariety ():
			
				return variety.
				
		file: SPopulationLib: public Simple inherit IPopulation:
		
			private Length:
			
				get only, returns items.Length
				
			private Simple (Variety variety, ICell[] items, Rule rule, int[] size, int[] states):
			
				private constructor for Clone () method, passes all instance variables.
			
			public Simple (Variety variety, int[] size):
				
				SetRule () initialization dependancy.
				public constructor for simple inital conditions.
				this.states from cell constructor out int[] states.
			
			public Simple (Variety variety, int[] size, int[] states):
				
				public constructor for manual states.
				SetRule () initialization dependancy.
				
			public void Evolve () inherit ICell:  // evolves once
				
				Uses System.Threading.Task.Parallel.For method:
				
					Effectively incompatable with Mono.
					Will compile and run with mono, using normal for loop.	
				
		namespace Cells:
	
			file: ICellLib: public interface ICell:
			
				All base and abstract Cells classes inherit.
			
				ICell GetNext ():
				
					Depends on base.next: null until added to prvent infinite search loop risk
					
					returns next ICell in scan.
				
				int GetState ():
				
					returns state
				
				void SetState (int state):
					
					sets state.
					
				int GetNeighbourhood (int color):
				
					color is the number of colors.
					returns neighbourhood.
					
			All base and abstract class members contain the following static methods or constructors:
			
				public static ICell[] Build (int[] size, out int[] states):
					
					Creates network of cells in specified size with specified states.
					Size is safed with manual exceptions.
					Overload for this (int[] size, int[] states).
					return items.
					
				public static ICell[] Build (int[] size, int[] states):
				
					Overload for Build (int[] size, int[] states):
					Constructs int[] states with simple seed.
					size safed with manual exceptions.
					
				public this (int state):
				
					Constructs new cell with given state.
					All links to this.
				
			file: GCellLib: public General inherit Cells.ICell:
			
				See note above about all base and abstract classes.
				
				Scan order: left, this, right.
				
				public General AddNeighbour (int state):
						
						Adds neighbour with passed state.
						returns cell added.
						
			file: VNCellLib: public VonNeumann inherit Cells.ICell:
			
				See note above about all base and abstract classes.
				
				Scan order: clockwise around border neighours, starting at left, folowed by this.
				
				public VonNeumann AddNeighbour (int state, bool newRow):
						
						Adds neighbour with passed state in current row if not (newRow).
						Adds neighbour with passes state in new row if (newRow).
						returns cell added.
	
	namespace Rules:
	
		file: IRuleLib: public interface IRule inherit ICloneable:
		
			All Rules base and abstract classes inherit this.
			
			void Parse (string rule):
			
				intialization dependancy.
				interprets rule as string and saves the string.
				
			int Implement (ICell cell):
			
				implements rule, returns new state value.
				
			string GetRule ():
				
				returns rule that it last parsed successfully.
				
		file: ARuleLib: public class Absolute inherit IRule:
		
			Parse method initalization dependancy.
		
			private Absolute (int color, BigInteger number, string rule):
				
				private constructor for Clone method.
				
			
		

TO-DO:

	Mono compatable parallelization in Population.Evolve.